<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Reactjs, | firfiBlog]]></title>
  <link href="http://Firfi.github.io/blog/categories/reactjs/atom.xml" rel="self"/>
  <link href="http://Firfi.github.io/"/>
  <updated>2016-10-28T14:44:16+07:00</updated>
  <id>http://Firfi.github.io/</id>
  <author>
    <name><![CDATA[Igor Loskutoff]]></name>
    <email><![CDATA[igor.loskutoff@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[React Native Simple Boxing Timer - From Scratch to the App Store]]></title>
    <link href="http://Firfi.github.io/blog/react-native-simple-boxing-timer-from-scratch-to-app-store/"/>
    <updated>2016-10-22T14:44:35+07:00</updated>
    <id>http://Firfi.github.io/blog/react-native-simple-boxing-timer-from-scratch-to-app-store</id>
    <content type="html"><![CDATA[<p>Ever wondered how easy it is to create your first app for iOS? It really isn’t. 
There are many pitfalls to consider. 
I’ll describe the process of developing your first app for iOS using React Native as it was actual in October, 2016.</p>

<!--more-->

<h1 id="develop-with-react-native">Develop with React Native</h1>

<p>It is quite easy to <a href="https://facebook.github.io/react-native/docs/getting-started.html">initialize React Native project</a> and start to tackle the code. With provided CLI, it will run nicely and have a hot refresh on the emulator, along with browser debug console. 
Developing with React Native feels great in comparison with Phonegap that I’ve tried before<br />
(<a href="https://play.google.com/store/apps/details?id=com.firfi.yobatimer">there is the link to the app I wrote as a result</a>)
In comparison with web React.js, instead of DOM components, you use native components like <code>&lt;View/&gt;</code> and write a lot of inline styles. 
Otherwise, it’s a familiar React JS app where you can use your favorite libraries like Bluebird, Moment.js, etc., and of course, Redux/Mobx too.
One exception – you cannot use the libraries working with DOM. Because there’s no DOM.
I’ve chosen Mobx for data handling and I think it was a very good solution for concrete application objectives.
It worked quite nicely with settings screen. That’s a topic in itself that I plan to write about in a future post.</p>

<p><img src="/images/boxing-timer/settings.png" alt="Settings screen" title="Boxing timer application settings screen" /></p>

<p>React Native components which were used for this screen - View, Picker and Settings classes.</p>

<h2 id="version-for-old-ios">Version for old iOS</h2>

<p>I wanted the app to be accessible as much as possible, including to the third-world countries. 
For this reason, I included iOS 7 support to the app (iPhone 4s and later). It brings additional considerations: 
React Native version 0.33.1 was the last version where iOS 7 was officially supported. 
Luckily, it wasn’t too old (it was released just a month ago) so I’ve decided to go with it. 
Of course, I’ve tried later versions initially, but they weren’t building well in xCode. </p>

<h2 id="design-material-ui">Design, Material UI</h2>

<p>All apps need a design. When you’re a web developer without a visual design sense, you reach for a Bootstrap. 
However, since is no Bootstrap in mobile apps world, I’ve turned to Google Material Design rulebook. 
First, I’ve decided on the color scheme. It had to be roughly the same I used for my previous timer app, so I got
an appropriate color combination from Material Design color guide.</p>

<h2 id="icons-buttons">Icons, buttons</h2>

<p>Second, I needed some buttons. 
Library <a href="https://github.com/xinthink/react-native-material-kit">React Native Material Kit</a> did the job.
Third, I’ve needed some icons. For the web, you just get Font Awesome, 
and the good news is, they’re available on <a href="https://github.com/oblador/react-native-vector-icons">React Native too</a></p>

<p><img src="/images/boxing-timer/main.png" alt="Main screen" title="Boxing timer application main screen" /></p>

<p>So now I had a design for my main screen.</p>

<h2 id="sleep-control-sounds">Sleep control, sounds</h2>

<p>The specifics of a timer application allow you to play sounds and have a control over screen sleeping.
For sounds, I’ve used <a href="https://github.com/zmxv/react-native-sound">React Native Sound</a> library. 
It was quite old at the time, but I haven’t found anything better. It did its job though and let me play the sounds.</p>

<div class="jumbotron">
    <p>Note that in order for some React Native libraries to work, you have to do additional settings in your iOS and Android projects.</p>
    <p>What you'll need to do is described in each library readme, but mostly running script `react-native link library-name` does the job automatically.</p>
    <p>This is true for Material Kit, Icons lib, React Native Sound and Screen Sleep Control lib.</p>
</div>

<p>For screen sleep control, I used <a href="https://github.com/corbt/react-native-keep-awake">react-native-keep-awake</a>. I do <code>KeepAwake.activate()</code> whenever timer is running and <code>KeepAwake.deactivate()</code> whenever timer is stopped. 
This way, the user won’t experience screen sleep in the middle of a training.</p>

<h2 id="rotation-control-responsive-font-size">Rotation control, responsive font size</h2>

<p>The challenging part was the reactive font size change, depending on screen rotation. 
Googling for screen rotation detection gave me a couple of deprecated and non-working libraries. 
The official React Native docs were quite vague on this matter. 
Eventually, in the depths of Stack Overflow, I found the answer, and now I’m sharing this Secret with you — use View’s onLayout callback function!</p>

<p><code>
&lt;View onLayout={(event) =&gt; {
    this.setState(this.calculateWH(event));
}}&gt;
...
</code></p>

<p>where calculateWH is defined this way:</p>

<p><code>
calculateWH(event) {
    const l = event ? event.nativeEvent.layout : Dimensions.get('window'); // for some reason, it doesn't always give the event
    return {
        vw: l.width / 100,
        vh: l.height / 100
    };
}
</code></p>

<p>so now you have vw and vh for reactively changing your fonts size, and also have re-rendered on screen rotation. 
Don’t forget to import Dimensions from <code>react-native</code> package.</p>

<h1 id="app-store">App store</h1>

<p>I found this part most time-consuming, in comparison with development itself.</p>

<h2 id="app-icons">App icons</h2>

<p>First, you need a nice icon. 
I just fetched a couple of free ones from the Internet, 
glued them together in Photoshop, and added a gradient background. 
Another thing you’ll need is a lot of different sizes for the icon. 
I uploaded my icon to <a href="https://makeappicon.com/">one of the free icon resizing services</a> and got it in various sizes.</p>

<p><img src="/images/boxing-timer/icon.png" alt="App Icon" title="App Icon" /></p>

<h2 id="app-screenshots-ux-testing">App screenshots, UX testing</h2>

<p>Second, in order to get your app published, you need screenshots. 
Usually, a couple is enough, but I wanted screenshots for all devices. 
As a result, with two app screens, I needed around 12 screenshots on 6 emulators. 
People who add internationalization in their app need screenshot packs for each language. 
For example, if I will be supporting 12 languages, I’ll require 144 screenshots. 
Better to be prepared for that, and automatize the process. 
For this and for beta testing / deployment, I used <a href="https://github.com/fastlane/fastlane">fastlane</a>.
Fastlane is a set of tools for automating several mobile development chores. 
It actually spared me a lot of clicks. 
I used its snapshot tool for taking screenshots. 
Before really using it, I needed to set up the tests in xCode. 
I did everything by the manual, but I ran into an issue: elements didn’t recognize testId property. 
So I’ve decided not to go with it, and record test with manual recording feature in xCode instead.</p>

<p>Here is my test code:</p>

<p>```
func testExample() {</p>

<pre><code>  let app = XCUIApplication()
  snapshot("0Timer")
  let startButton = app.buttons[" Start  "]
  startButton.tap()
  let stopButton = app.buttons[" Stop  "]
  stopButton.tap()
  app.tabBars.buttons["Settings"].tap()
  snapshot("1Settings")
</code></pre>

<p>}
```</p>

<p>After running it in snapshot tool, I got 12 nice screenshots. Now I can use them for internationalization also.</p>

<h2 id="beta-signing-release">Beta, signing, release</h2>

<p>It was time to check the app in a real environment. 
By default, fastlane is set up for TestFlight, 
but TestFlight doesn’t work on old iOS that I had at the time, so I’ve reconfigured it to TestFairy service. 
After checking on the device, I’ve released it with fastlane deploy. This process has its moments (i.e. signing) 
but generally, fastlane automatize most of the chores for you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making browserify.js Working With Meteor Application]]></title>
    <link href="http://Firfi.github.io/blog/making-browserify-dot-js-working-with-meteor-application/"/>
    <updated>2015-06-16T21:33:52+07:00</updated>
    <id>http://Firfi.github.io/blog/making-browserify-dot-js-working-with-meteor-application</id>
    <content type="html"><![CDATA[<ul>
  <li>Update * This article is completely outdated as Meteor supports npm packages out of the box now.</li>
</ul>

<p>In previous <a href="http://www.loskutoff.com/blog/using-reactjs-as-a-meteorjs-views/">post</a>
I described how to wrap existing npm (especially React-related) packages into Meteor packages to use them in your application.</p>

<p>This way was quite hacky and was involving manual build modification, as well as forking existing libraries and committing build distributions in those forks.</p>

<p>I choose this way as there wasn’t a way to <a href="http://browserify.org/">browserify</a> packages on meteor application build step.</p>

<p>That really delighted me when I found that Eli Doran (https://github.com/elidoran) recently wrote custom <a href="https://github.com/elidoran/cosmos-browserify">build plugin</a>
that finally enable us to include browserifyed React packages without writing those terrible wrappers!</p>

<p>From now I deprecate my libraries that I ported for <a href="https://atmospherejs.com/">Atmosphere</a> package manager and recommend to those who still use wrapped packages move to Browserify with cosmos-browserify library help.</p>

<p>Below I’ll describe how I moved my project from wrapped atmosphere packages to browserifyed components with <a href="https://github.com/elidoran/cosmos-browserify">cosmos-browserify</a>.</p>

<!--more-->

<h2 id="migrating-to-right-way-of-libraries-usage">Migrating to ‘right way’ of libraries usage</h2>

<p>Let’s presume we have <code>firfi:meteor-react-bootstrap</code> package installed. It exports <code>ReactBootstrap</code> global for us.</p>

<p>Only one line of code that makes that possible is <code>firfi:meteor-react-bootstrap</code> in .meteor/packages. It was added either manuall or with <code>meteor add firfi:meteor-react-bootstrap</code> command.</p>

<p>Now, let’s remove it and substitute with browserifyed version.</p>

<h3 id="adding-browserifyed-library-to-our-meteor-application">Adding browserifyed library to our Meteor application</h3>

<p>I’ll go with local package way. This way, all browserifyed libraries will be available in all parts of your code as local packages being loaded before all other app code.</p>

<p>First let’s create a package in folder packages. Let’s call it <code>client-deps</code>, so final created path would be <code>packages/client-deps</code>.</p>

<p>To make Meteor identify it as a package, we should add file package.js there:</p>

<div><div class="CodeRay">
  <div class="code"><pre><span style="color:#777">// packages/client-deps/package.js</span>

Package.describe({
  <span style="color:#606">name</span>: <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">client-deps</span><span style="color:#710">'</span></span>
});

Npm.depends({
  <span style="color:#606"><span style="color:#404">'</span><span>react-bootstrap</span><span style="color:#404">'</span></span>: <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">0.23.3</span><span style="color:#710">'</span></span>, <span style="color:#777">// this library will be browserifyed later</span>
  <span style="color:#606">react</span> : <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">0.13.3</span><span style="color:#710">'</span></span> <span style="color:#777">// we'll also add react itself so react-bootstrap doesn't feel loneliness</span>
});

Package.onUse(<span style="color:#080;font-weight:bold">function</span>(api) {
  api.use([<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">cosmos:browserify@0.3.0</span><span style="color:#710">'</span></span>]); <span style="color:#777">// insert the latest version here</span>
  api.addFiles([<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">app.browserify.js</span><span style="color:#710">'</span></span>]); <span style="color:#777">// we'll create this file below</span>
  api.<span style="color:#080;font-weight:bold">export</span>([<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">ReactBootstrap</span><span style="color:#710">'</span></span>, <span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">React</span><span style="color:#710">'</span></span>]); <span style="color:#777">// it's exported in app.browserify.js</span>
});

</pre></div>
</div>
</div>

<p>To tell which libraries we’ll browserify we need a .browserify file which will be handled by cosmos-browserify build plugin.</p>

<p>Cosmos-browserify will unwrap all require()’d libraries in browserify bundles.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span style="color:#777">// packages/client-deps/app.browserify.js</span>
React = require(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">react/addons</span><span style="color:#710">'</span></span>);
ReactBootstrap = require(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">react-bootstrap</span><span style="color:#710">'</span></span>); <span style="color:#777">// export it 'globally' so Meteor is happy and can `api.export` it in package.js</span>
</pre></div>
</div>
</div>

<p>And, to make it all work, you should finally install cosmos-browserify itself: <code>meteor add cosmos:browserify</code>
and point your meteor app that it should use your local package: <code>meteor add client-deps</code></p>

<p>Don’t forget to delete old libraries that were exporting your <code>ReactBootstrap</code> and <code>React</code>. In my case it was
<code>firfi:meteor-react-bootstrap</code> (that was depending on old version of https://github.com/grovelabs/meteor-react with React exported).</p>

<p>If after this you still get some react warnings it is quite possible you still have some libraries that exporting or using internally it’s own React versions. In that case just browserify it too,
as I had to do with <code>reactjs:react</code>, <code>firfi:griddle-react</code>, <code>dgellow:react-loader</code> and <code>firfi:tcomb-form</code>.</p>

<p>With definitely more boilerplate you get latest versions of all npm libraries existing without third-party wrappers and also have it included ‘right way’. Happy meteor coding!</p>
]]></content>
  </entry>
  
</feed>
